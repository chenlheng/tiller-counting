% Auto-generated by cameraCalibrator app on 10-Apr-2018
%-------------------------------------------------------

path = 'G:\Code\tiller-counting\0409_camera_calibration\';

% Define images to process
imageFileNames = [];
for i = 1:29
    imageFileNames = [imageFileName
    append(imageFileNames, strcat(path, int2str(i), '.bmp'));
end
imageFileNames

% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Generate world coordinates of the corners of the squares
squareSize = 20;  % in units of 'mm'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'mm', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', []);

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')

for idx = 1: 30
    pic = imread(strcat(path, int2str(idx), '.bmp'));
    out_pic = undistortImage(pic, cameraParams);
    imwrite(out_pic, strcat(path, 'undistImage', int2str(idx), '.bmp'))
end

myCamParam = struct(cameraParams);
inMat = myCamParam.IntrinsicMatrix;
tranVecs = myCamParam.TranslationVectors;
rotVecs = myCamParam.RotationVectors;
rotMats = myCamParam.RotationMatrices;
save(strcat(path, 'inMat.mat'), 'inMat')
save(strcat(path, 'tranVecs.mat'), 'tranVecs')
save(strcat(path, 'rotVecs.mat'), 'rotVecs')
save(strcat(path, 'rotMats.mat'), 'rotMats')
